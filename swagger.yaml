openapi: 3.0.0
info:
  title: Paziresh24 web services document
  version: '1.0'
  description: Health system platform to connect patients to providers
  termsOfService: https://www.paziresh24.com/home/rules/
  contact:
    email: info@paziresh24.com
    name: paziresh24
    url: https://www.paziresh24.com
servers:
  - url: https://apigw.paziresh24.com
    variables: {}
paths:
  /v1/providers:
    get:
      summary: get providers information
      description: ''
      operationId: getProviderInfo
      parameters:
        - name: user_id
          description: Uniqe identifier of any users
          schema:
            $ref: '#/components/schemas/user/properties/id'
          in: query
      responses:
        '200':
          description: Normal response to fetch a provider
          content:
            application/json:
              schema:
                properties:
                  providers:
                    nullable: false
                    type: array
                    items:
                      $ref: '#/components/schemas/provider'
      tags:
        - Providers
    patch:
      summary: Update provider fields
      description: ''
      operationId: user_id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                biography:
                  $ref: '#/components/schemas/provider/properties/biography'
                employee_id:
                  $ref: '#/components/schemas/provider/properties/employee_id'
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Providers
    post:
      summary: Store a provider
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                slug:
                  $ref: '#/components/schemas/provider/properties/slug'
                employee_id:
                  $ref: '#/components/schemas/provider/properties/employee_id'
                user_id:
                  $ref: '#/components/schemas/provider/properties/user_id'
      responses:
        '201':
          $ref: '#/components/responses/201'
      tags:
        - Providers
  /v1/providers/{id}/increment-page-view:
        patch:
          summary: Increment provider page view count
          description: ''
          operationId: updateProviderPageView
          parameters:
            - name: id
              in: path
              schema:
                $ref: '#/components/schemas/provider/properties/id'
              required: true
          responses:
            '200':
                description: provider page view incremented successfuly

          tags:
            - Providers
  /v1/memberships:
    summary: Relational record between users and centers
    get:
      summary: Get membership records
      description: ''
      operationId: getMembershipInfo
      parameters:
        - name: provider_id
          schema:
            $ref: '#/components/schemas/provider/properties/id'
          in: query
      responses:
        '200':
          description: Get membership records
          content:
            application/json:
              schema:
                properties:
                  memberships:
                    nullable: false
                    type: array
                    items:
                      $ref: '#/components/schemas/membership'
      tags:
        - Memberships
    post:
      summary: 'Insert membership record '
      description: Link a user from other platforms to a provider's profiles
      operationId: insertMembership
      security:
        - BearerAuth:
            - center_admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                provider_id:
                  $ref: '#/components/schemas/membership/properties/provider_id'
                center_id:
                  $ref: '#/components/schemas/membership/properties/center_id'
                booking_link:
                  $ref: '#/components/schemas/membership/properties/booking_link'
      responses:
        '201':
          $ref: '#/components/responses/201'
      tags:
        - Memberships
  /v1/memberships/{id}:
    summary: remove a membership
    delete:
      description: >-
        Delete connection between user of other platforms and provider's profile
        in paziresh24
      operationId: deleteMembership
      security:
        - BearerAuth:
            - center_admin
      parameters:
        - name: id
          in: path
          schema:
            $ref: '#/components/schemas/membership/properties/id'
          required: true
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Memberships
  /v1/services:
    summary: get services of provider
    get:
      summary: Get list of services
      description: ''
      operationId: ''
      parameters:
        - name: membership_id
          schema:
            $ref: '#/components/schemas/membership/properties/id'
          in: query
          required: true
      responses:
        '200':
          description: Get membership records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/service'
      tags:
        - Services
  /v1/appointments:
    summary: Appointments
    post:
      summary: Submit an appointment
      description: ''
      operationId: ''
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Either `time` or `reserve_id` is required.
              properties:
                membership_id:
                  $ref: '#/components/schemas/membership/properties/id'
                service_id:
                  $ref: '#/components/schemas/service/properties/id'
                time:
                  type: string
                  format: date-time
                reserve_id:
                  $ref: '#/components/schemas/reserve/properties/id'
                sub_user:
                  allOf:
                    - $ref: '#/components/schemas/sub_user/properties/id'
                    - description: >-
                        if sub user is present, the book will be set for sub
                        user.
              required:
                - membership_id
                - service_id
      responses:
        '200':
          description: Appointment submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appointment'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - Appointments
  /v1/availability:
    summary: Available slots
    get:
      summary: Get ist of available slots
      description: ''
      operationId: ''
      parameters:
        - name: service_id
          schema:
            $ref: '#/components/schemas/service/properties/id'
          in: query
          required: true
        - name: membership_id
          schema:
            $ref: '#/components/schemas/membership/properties/id'
          in: query
          required: true
        - name: start_time
          in: query
          description: >-
            start time of calendar. if not exist, first day of month will be
            considered.
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          description: >-
            end time of calendar. if not exist, last day of month will be
            considered.
          schema:
            type: string
            format: date-time
        - name: timezone
          in: query
          schema:
            $ref: '#/components/schemas/timezone'
          required: false
      responses:
        '200':
          description: When a free time found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date-time
                      example: '2023-09-21T00:00:00.000000+03:30'
                    slots:
                      type: array
                      items:
                        type: object
                        properties:
                          time:
                            type: string
                            format: date-time
                            example: '2023-09-21T10:00:00.000000+03:30'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - Availability
  /v1/providers-specialities:
    get:
      summary: Get list of provider's specialities
      parameters:
        - name: provider_id
          schema:
            $ref: '#/components/schemas/provider/properties/id'
          in: query
      responses:
        '200':
          description: Get list of provider's specialities
          content:
            application/json:
              schema:
                properties:
                  providers_specialities:
                    nullable: false
                    type: array
                    items:
                      $ref: '#/components/schemas/provider_speciality'
      tags:
        - Providers Specialities
    post:
      summary: Store list of specialities alongside academic degree for a provider
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                alias:
                  $ref: '#/components/schemas/provider_speciality/properties/alias'
                academic_degree_id:
                  $ref: '#/components/schemas/academic_degree/properties/id'
                speciality_id:
                  $ref: '#/components/schemas/speciality/properties/id'
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Providers Specialities
  /v1/providers-specialities/{id}:
    patch:
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/provider_speciality/properties/id'
          in: path
          required: true
      summary: Update speciality alongside academic degree of a provider
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                alias:
                  $ref: '#/components/schemas/provider_speciality/properties/alias'
                academic_degree_id:
                  $ref: '#/components/schemas/academic_degree/properties/id'
                speciality_id:
                  $ref: '#/components/schemas/speciality/properties/id'
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Providers Specialities
    delete:
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/provider_speciality/properties/id'
          in: path
          required: true
      summary: delete a record of providers specialities
      description: ''
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Providers Specialities
  /v1/specialities-tags:
    get:
      summary: tags of spciality
      parameters:
        - name: speciality_id
          schema:
            $ref: '#/components/schemas/speciality/properties/id'
          in: query
      responses:
        '200':
          description: Get tags of spciality
          content:
            application/json:
              schema:
                properties:
                  specialities_tags:
                    nullable: false
                    type: array
                    items:
                      $ref: '#/components/schemas/specialities_tags'
      tags:
        - SpecialitiesTags
  /v1/users/{id}:
    summary: users information
    get:
      summary: get user information
      description: ''
      operationId: getUser
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/user/properties/id'
          in: path
          required: true
      responses:
        '200':
          description: Get user information
          content:
            application/json:
              schema:
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
      tags:
        - Users
    patch:
      summary: update user information
      description: ''
      operationId: updateUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/user/properties/id'
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/authenticated_user/properties/name'
                family:
                  $ref: '#/components/schemas/authenticated_user/properties/family'
                national_code:
                  $ref: >-
                    #/components/schemas/authenticated_user/properties/national_code
                cell:
                  allOf:
                    - $ref: '#/components/schemas/authenticated_user/properties/cell'
                  description: user new cell should be sent along with otp
                otp:
                  example: '4556'
                  type: string
                  description: The otp sent to the user new cell.
      responses:
        '200':
          description: Get Authenticated user information
          content:
            application/json:
              schema:
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/authenticated_user'
      tags:
        - Users
  /v1/users/{id}/otp:
    patch:
      summary: send otp to verify user new cell
      description: ''
      operationId: userCellOtp
      security:
        - BearerAuth: []
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/user/properties/id'
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cell:
                  allOf:
                    - $ref: '#/components/schemas/authenticated_user/properties/cell'
                    - description: user new cell
      responses:
        '200':
          description: otp sent to new user cell successfuly
      tags:
        - Users
  /v1/auth/me:
    summary: fetch authenticated user record
    get:
      summary: get authenticated user information
      description: ''
      operationId: getAuthenticatedUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Get Authenticated user information
          content:
            application/json:
              schema:
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/authenticated_user'
      tags:
        - Auth
  /v1/auth/resend-password:
    summary: send new password to user cell
    get:
      summary: send new password to user cell
      description: ''
      operationId: resendPassword
      parameters:
        - name: mobile
          schema:
            nullable: false
            description: mobile number of the user
            example: '913000000'
            type: string
          in: query
      responses:
        '200':
          description: new Password sent succecfully
      tags:
        - Auth
  /v1/auth/login:
    post:
      summary: authenticate user by username and password
      description: ''
      operationId: LoginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  allOf:
                    - nullable: false
                    - description: username of the user
                    - example: '913000000'
                    - type: string
                password:
                  allOf:
                    - nullable: false
                    - description: password of the user
                    - example: '4552'
                    - type: string
      responses:
        '200':
          description: sucess authentication response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success_authentication'
      tags:
        - Auth
  /v1/auth/refresh:
    post:
      summary: refresh expired authentication token
      operationId: RefreshToken
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success refresh response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success_authentication'
      tags:
        - Auth
  /v1/reserve:
    post:
      summary: Reserve a time slot for 5 minutes
      description: ''
      operationId: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                membership_id:
                  $ref: '#/components/schemas/membership/properties/id'
                service_id:
                  $ref: '#/components/schemas/service/properties/id'
                time:
                  type: string
                  format: date-time
              required:
                - membership_id
                - service_id
                - time
      responses:
        '200':
          description: Time slot reserved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reserve'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - Availability
  /v1/reserve/{reserve_id}:
    delete:
      summary: Remove reservation of slot
      description: ''
      operationId: ''
      parameters:
        - name: reserve_id
          in: path
          schema:
            $ref: '#/components/schemas/reserve/properties/id'
          required: true
        - name: membership_id
          in: query
          schema:
            $ref: '#/components/schemas/membership/properties/id'
          required: true
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Availability
  /v1/appointments/{id}:
    patch:
      summary: Update an appointment info
      security:
        - BearerAuth: []
      description: ''
      operationId: ''
      parameters:
        - name: id
          in: path
          schema:
            $ref: '#/components/schemas/appointment/properties/id'
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_time:
                  $ref: '#/components/schemas/appointment/properties/start_time'
                end_time:
                  $ref: '#/components/schemas/appointment/properties/end_time'
                payment_status:
                  $ref: '#/components/schemas/payment_status'
                paziresh_status:
                  $ref: '#/components/schemas/paziresh_status'
                visit_status:
                  $ref: '#/components/schemas/visit_status'
      responses:
        '200':
          description: Appointment submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appointment'
      tags:
        - Appointments
    delete:
      summary: Delete an appointment
      security:
        - BearerAuth: []
      description: ''
      operationId: ''
      parameters:
        - name: id
          in: path
          schema:
            $ref: '#/components/schemas/appointment/properties/id'
          required: true
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Appointments

tags:
  - name: Providers
  - name: Users
  - name: Auth
  - name: Memberships
  - name: Services
  - name: Availability
  - name: Appointments
  - name: Providers Specialities
  - name: SpecialitiesTags
components:
  schemas:
    user:
      description: user information
      properties:
        id:
          nullable: false
          description: uniqe identifier of any user
          example: 123
          type: integer
        name:
          nullable: true
          description: Name of the user
          example: Mohammad
          type: string
        family:
          nullable: true
          description: Family of the user
          example: Mohammadian
          type: string
    success_authentication:
      properties:
        access_token:
          description: token of the authenticated user
          example: >-
            eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2RvY3RvcnMtYXBpLnBhemlyZXNoMjQuY29tL1YxL2F1dGgvbG9naW4iLCJpYXQiOjE2OTY0MDA0MTIsImV4cCI6MTY5NzYxMDAxMiwibmJmIjoxNjk2NDAwNDEyLCJqdGkiOiJTUE1tVlhJNVNxQ2NCV1haIiwic3ViIjoiMTI0OTg5NzUiLCJuYW1lIjoi2KrYs9iqIiwiZmFtaWx5Ijoi2KrYs9iqIiwiZ2VuZGVyIjoibWFsZSIsInJvbGUiOiJ1c2VyIn0.zGHVD4MgJePIssjfGQWhG1AwBRefSVPUHecXF8WYpq0
          type: string
        token_type:
          description: type of the token
          example: bearer
          type: string
        expires_in:
          description: token expire duration
          example: 1209600
          type: integer
    authenticated_user:
      description: authenticated user information
      properties:
        id:
          $ref: '#/components/schemas/user/properties/id'
        name:
          $ref: '#/components/schemas/user/properties/name'
        family:
          $ref: '#/components/schemas/user/properties/family'
        cell:
          nullable: true
          description: cell of the user
          example: '913000000'
          type: string
        national_code:
          nullable: true
          description: national_code of the user
          example: '124666554'
          type: string
    sub_user:
      description: user subset information
      properties:
        id:
          nullable: false
          description: uniqe identifier of any subset
          example: 123
          type: integer
        user_id:
          $ref: '#/components/schemas/user/properties/id'
    provider:
      description: provider information
      properties:
        id:
          nullable: false
          title: provider id
          type: integer
          example: 1234
        biography:
          nullable: true
          title: provider biography
          type: string
          example: This is a example test biography
        user_id:
          $ref: '#/components/schemas/user/properties/id'
        employee_id:
          description: >-
            uniqe identifer of any provider related to his/her job (ex: for
            doctors is medical code)
          type: string
          example: 1234567890
        job_title:
          description: job title of provider
          enum:
            - doctor
          type: string
          example: doctor
        prefix:
          description: >-
            prefix of provider according to his/her job  (ex: for doctors is
            دکتر)
          type: string
          example: دکتر
        slug:
          description: >-
            Provider slug profile (ex: دکتر-محمدی is accessible from this url
            https://paziresh24.com/dr/دکتر-محمدی)
          type: string
          example: دکتر
        page_view:
          nullable: false
          title: page view
          type: integer
          example: 15
    provider_speciality:
      description: Specialities of a provider
      properties:
        id:
          nullable: false
          title: provider speciality id
          type: integer
          example: 1234
        alias:
          title: alias
          nullable: true
          description: this refers to an alias title which was chosen by the provider
          type: string
          example: فوق تخصص حلق و گوش
        speciality:
          $ref: '#/components/schemas/speciality'
        academic_degree:
          $ref: '#/components/schemas/academic_degree'
    specialities_tags:
      description: tags of speciality
      properties:
        tag:
          $ref: '#/components/schemas/tag'
    tag:
      properties:
        id:
          nullable: false
          title: tag id
          type: integer
          example: 4
        title:
          nullable: true
          title: Title of tag
          type: string
          example: خون، سرطان و انکولوژی'
    speciality:
      description: >-
        Specialities which are supported and providers can choose from them, for
        example:  بهداشت روان، بیوشیمی بالینی
      properties:
        id:
          nullable: false
          title: speciality id
          type: integer
          example: 1234
        title:
          nullable: true
          title: Title of speciality
          type: string
          example: بهداشت روان
    academic_degree:
      description: >-
        Academic degree which are supported and providers can choose from them,
        for example: کارشناس، متخصص
      properties:
        id:
          nullable: false
          title: Academic degree id
          type: integer
          example: 1234
        title:
          nullable: true
          title: Title of an academic degree
          type: string
          example: کارشناسی ارشد
    membership:
      description: Relational record between users and centers
      properties:
        id:
          description: Member identifier
          example: 1
          type: integer
        provider_id:
          $ref: '#/components/schemas/provider/properties/id'
        center_id:
          description: Identifier of center (facilities that providers work on)
          example: 9876
          type: string
        booking_link:
          description: Base url of booking APIs for provider in the center
          type: string
          example: https://panel.paziresh24.com/api/v2/user-centers/1234
    service:
      description: The information of service
      properties:
        id:
          description: Service identifier
          example: 1
          type: string
        title:
          description: Service title
          example: ویزیت
          type: string
        duration:
          description: service duration
          example: '00:15:00'
          type: string
        description:
          description: service description
          type: string
        price:
          description: service price
          type: integer
          example: 100000
    appointment:
      description: Booked appointment information
      properties:
        id:
          type: string
          format: uuid
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        need_payment:
          type: boolean
    reserve:
      description: Reserved slot information
      properties:
        id:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
    timezone:
      type: string
      enum:
        - Asia/Tehran
        - America/Chicago
        - ...
    payment_status:
      type: string
      enum:
        - not_paid
        - in_progress
        - paid
        - refunded
        - refund_queue
        - refund_error
        - refund_request
        - refund_reject
    paziresh_status:
      type: string
      enum:
        - not_accepted
        - accepted
    visit_status:
      type: string
      enum:
        - not_visited
        - visited
  responses:
    '201':
      description: Record inserted successfully
    '204':
      description: No Content (request was successfully executed)
    '404':
      description: Resource not found
      content:
        application/json:
          schema:
            properties:
              status:
                type: string
                example: FAILED
              message:
                type: string
    '409':
      description: There is a conflict
      content:
        application/json:
          schema:
            properties:
              status:
                type: string
                example: FAILED
              message:
                type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
