openapi: 3.0.0
info:
  title: Paziresh24 web services document
  version: '1.0'
  description: Health system platform to connect patients to providers
  termsOfService: https://www.paziresh24.com/home/rules/
  contact:
    email: info@paziresh24.com
    name: paziresh24
    url: https://www.paziresh24.com
servers:
  - url: https://apigw.paziresh24.com
    variables: {}
paths:
  /v1/providers:
    get:
      summary: get providers information
      description: ''
      operationId: getProviderInfo
      parameters:
        - name: user_id
          description: Uniqe identifier of any users
          schema:
            $ref: '#/components/schemas/user/properties/id'
          in: query
      responses:
        '200':
          description: Normal response to fetch a provider
          content:
            application/json:
              schema:
                properties:
                  providers:
                    nullable: false
                    type: array
                    items:
                      $ref: '#/components/schemas/provider'
      tags:
        - Providers
    patch:
      summary: Update provider fields
      description: ''
      operationId: user_id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                biography:
                  $ref: '#/components/schemas/provider/properties/biography'
                employee_id:
                  $ref: '#/components/schemas/provider/properties/employee_id'
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Providers
    post:
      summary: Store a provider
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                slug:
                  $ref: '#/components/schemas/provider/properties/slug'
                employee_id:
                  $ref: '#/components/schemas/provider/properties/employee_id'
                user_id:
                  $ref: '#/components/schemas/provider/properties/user_id'
      responses:
        '201':
          $ref: '#/components/responses/201'
      tags:
        - Providers
  /v1/memberships:
    summary: Relational record between users and centers
    get:
      summary: Get membership records
      description: ''
      operationId: getMembershipInfo
      parameters:
        - name: user_id
          schema:
            $ref: '#/components/schemas/user/properties/id'
          in: query
      responses:
        '200':
          description: Get membership records
          content:
            application/json:
              schema:
                properties:
                  memberships:
                    nullable: false
                    type: array
                    items:
                      $ref: '#/components/schemas/membership'
      tags:
        - Memberships
    post:
      summary: 'Insert membership record '
      description: Link a user from other platforms to a provider's profiles
      operationId: insertMembership
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/membership'
      responses:
        '201':
          $ref: '#/components/responses/201'
      tags:
        - Memberships
  /v1/memberships/{center_id}/{user_id}:
    summary: remove a membership
    delete:
      description: >-
        Delete connection between user of other platforms and provider's profile
        in paziresh24
      operationId: deleteMembership
      parameters:
        - name: user_id
          in: path
          schema:
            $ref: '#/components/schemas/user/properties/id'
          required: true
        - name: center_id
          in: path
          schema:
            $ref: '#/components/schemas/membership/properties/center_id'
          required: true
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Memberships
  /v1/services:
    summary: get services of provider
    get:
      summary: Get list of services
      description: ''
      operationId: ''
      parameters:
        - name: membership_id
          schema:
            $ref: '#/components/schemas/membership/properties/id'
          in: query
          required: true
      responses:
        '200':
          description: Get membership records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/service'
      tags:
        - Services
  /v1/appointments:
    summary: Appointments
    post:
      summary: Submit an appointment
      description: ''
      operationId: ''
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                membership_id:
                  $ref: '#/components/schemas/membership/properties/id'
                service_id:
                  $ref: '#/components/schemas/service/properties/id'
                start_time:
                  type: string
                  format: date-time
                sub_user:
                  allOf:
                    - $ref: '#/components/schemas/sub_user/properties/id'
                    - description: >-
                        if sub user is present, the book will be set for sub user.
              required:
                - availability_id
      responses:
        '200':
          description: Appointment submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appointment'
      tags:
        - Appointments

  /v1/availibility:
    summary: Available slots
    get:
      summary: Get ist of available slots
      description: ''
      operationId: ''
      parameters:
        - name: service_id
          schema:
            $ref: '#/components/schemas/service/properties/id'
          in: query
          required: true
        - name: membership_id
          schema:
            $ref: '#/components/schemas/membership/properties/id'
          in: query
          required: true
        - name: start_time
          in: query
          description: start time of calendar. if not exist, first day of month will be considered.
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          description: end time of calendar. if not exist, last day of month will be considered.
          schema:
            type: string
            format: date-time
        - name: timezone
          in: query
          schema:
            $ref: '#/components/schemas/timezone'
          required: false
      responses:
        '200':
          description: When a free time found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date-time
                      example: 2023-09-21T00:00:00.000000+03:30
                    slots:
                      type: array
                      items:
                        type: object
                        properties:
                          time:
                            type: string
                            format: date-time
                            example: 2023-09-21T10:00:00.000000+03:30
        '404':
          $ref: '#/components/responses/404'

      tags:
        - Availability

tags:
  - name: Providers
  - name: Users
  - name: Memberships
  - name: Services
  - name: Availability
  - name: Appointments
components:
  schemas:
    user:
      description: user information
      properties:
        id:
          nullable: false
          description: uniqe identifier of any user
          example: 123
          type: integer
    sub_user:
      description: user subset information
      properties:
        id:
          nullable: false
          description: uniqe identifier of any subset
          example: 123
          type: integer
        user_id:
          $ref: '#/components/schemas/user/properties/id'
    provider:
      description: provider information
      properties:
        biography:
          nullable: true
          title: provider biography
          type: string
          example: This is a example test biography
        user_id:
          $ref: '#/components/schemas/user/properties/id'
        employee_id:
          description: >-
            uniqe identifer of any provider related to his/her job (ex: for
            doctors is medical code)
          type: string
          example: 1234567890
        job_title:
          description: job title of provider
          enum:
            - doctor
          type: string
          example: doctor
        prefix:
          description: >-
            prefix of provider according to his/her job  (ex: for doctors is
            دکتر)
          type: string
          example: دکتر
        slug:
          description: >-
            Provider slug profile (ex: دکتر-محمدی is accessible from this url
            https://paziresh24.com/dr/دکتر-محمدی)
          type: string
          example: دکتر
    membership:
      description: Relational record between users and centers
      properties:
        id:
          description: Member identifier
          example: 1
          type: integer
        user_id:
          $ref: '#/components/schemas/user/properties/id'
        center_id:
          description: Identifier of center (facilities that providers work on)
          example: 9876
          type: string
        booking_link:
          description: Base url of booking APIs for provider in the center
          type: string
          example: https://panel.paziresh24.com/api/v2/user-centers/1234
    service:
      description: The information of service
      properties:
        id:
          description: Service identifier
          example: 1
          type: string
        title:
          description: Service title
          example: ویزیت
          type: string
        duration:
          description: service duration
          example: '00:15:00'
          type: string
        description:
          description: service description
          type: string
        price:
          description: service price
          type: integer
          example: 100000
    appointment:
      description: Booked appointment information
      properties:
        id:
          type: string
          format: uuid
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        has_payment:
          type: boolean


    timezone:
      type: string
      enum:
        - Asia/Tehran
        - America/Chicago
        - ...
  responses:
    '201':
      description: Record inserted successfully
    '204':
      description: No Content (request was successfully executed)
    '404':
      description: Resource not found
      content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: FAILED
                  message:
                    type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT