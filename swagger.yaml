openapi: 3.0.0
info:
  title: Paziresh24 web services document
  version: '1.0'
  description: Health system platform to connect patients to providers
  termsOfService: https://www.paziresh24.com/home/rules/
  contact:
    email: info@paziresh24.com
    name: paziresh24
    url: https://www.paziresh24.com
servers:
  - url: https://apigw.paziresh24.com
    variables: {}
paths:
  /v1/providers:
    get:
      summary: get providers information
      description: ''
      operationId: getProviderInfo
      parameters:
        - name: user_id
          description: Uniqe identifier of any users
          schema:
            $ref: '#/components/schemas/user/properties/id'
          in: query
      responses:
        '200':
          description: Normal response to fetch a provider
          content:
            application/json:
              schema:
                properties:
                  providers:
                    nullable: false
                    type: array
                    items:
                      $ref: '#/components/schemas/provider'
      tags:
        - Providers
    patch:
      summary: Update provider fields
      security:
        - BearerAuth: []
      description: ''
      operationId: user_id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                biography:
                  $ref: '#/components/schemas/provider/properties/biography'
                employee_id:
                  $ref: '#/components/schemas/provider/properties/employee_id'
                notify_cell:
                  $ref: >-
                    #/components/schemas/provider_notification/properties/notify_cell
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Providers
    post:
      summary: Store a provider
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                slug:
                  $ref: '#/components/schemas/provider/properties/slug'
                employee_id:
                  $ref: '#/components/schemas/provider/properties/employee_id'
                user_id:
                  $ref: '#/components/schemas/provider/properties/user_id'
      responses:
        '201':
          $ref: '#/components/responses/201'
      tags:
        - Providers
  /v1/providers/{id}/notify-cell:
    get:
      description: get provider notification cell
      security:
        - BearerAuth: []
      operationId: getProviderNotifyCell
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/provider/properties/id'
          in: path
          required: true
      responses:
        '200':
          description: get provider notification cell
          content:
            application/json:
              schema:
                properties:
                  providers:
                    type: array
                    items:
                      $ref: '#/components/schemas/provider_notification'
      tags:
        - Providers
  /v1/providers/{id}/increment-page-view:
    patch:
      summary: Increment provider page view count
      description: ''
      operationId: updateProviderPageView
      parameters:
        - name: id
          in: path
          schema:
            $ref: '#/components/schemas/provider/properties/id'
          required: true
      responses:
        '200':
          description: provider page view incremented successfully
      tags:
        - Providers
  /v1/memberships:
    summary: Relational record between users and centers
    get:
      summary: Get membership records
      description: ''
      operationId: getMembershipInfo
      parameters:
        - name: provider_id
          schema:
            $ref: '#/components/schemas/provider/properties/id'
          in: query
      responses:
        '200':
          description: Get membership records
          content:
            application/json:
              schema:
                properties:
                  memberships:
                    nullable: false
                    type: array
                    items:
                      $ref: '#/components/schemas/membership'
      tags:
        - Memberships
    post:
      summary: 'Insert membership record '
      description: Link a user from other platforms to a provider's profiles
      operationId: insertMembership
      security:
        - BearerAuth:
            - center_admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                provider_id:
                  $ref: '#/components/schemas/membership/properties/provider_id'
                center_id:
                  $ref: '#/components/schemas/membership/properties/center_id'
                booking_link:
                  $ref: '#/components/schemas/membership/properties/booking_link'
      responses:
        '201':
          $ref: '#/components/responses/201'
      tags:
        - Memberships
  /v1/memberships/{id}:
    summary: remove a membership
    delete:
      description: >-
        Delete connection between user of other platforms and provider's profile
        in paziresh24
      operationId: deleteMembership
      security:
        - BearerAuth:
            - center_admin
      parameters:
        - name: id
          in: path
          schema:
            $ref: '#/components/schemas/membership/properties/id'
          required: true
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Memberships
  /v1/services:
    summary: get services of provider
    get:
      summary: Get list of services
      description: ''
      operationId: ''
      parameters:
        - name: membership_id
          schema:
            $ref: '#/components/schemas/membership/properties/id'
          in: query
          required: true
      responses:
        '200':
          description: Get membership records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/service'
      tags:
        - Services
  /v1/appointments:
    summary: Appointments
    post:
      summary: Submit an appointment
      description: ''
      operationId: ''
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Either `time` or `reserve_id` is required.
              properties:
                membership_id:
                  $ref: '#/components/schemas/membership/properties/id'
                service_id:
                  $ref: '#/components/schemas/service/properties/id'
                time:
                  type: string
                  format: date-time
                reserve_id:
                  $ref: '#/components/schemas/reserve/properties/id'
                sub_user:
                  allOf:
                    - $ref: '#/components/schemas/sub_user/properties/id'
                    - description: >-
                        if sub user is present, the book will be set for sub
                        user.
              required:
                - membership_id
                - service_id
      responses:
        '200':
          description: Appointment submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appointment'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - Appointments
  /v1/availability:
    summary: Available slots
    get:
      summary: Get ist of available slots
      description: ''
      operationId: ''
      parameters:
        - name: service_id
          schema:
            $ref: '#/components/schemas/service/properties/id'
          in: query
          required: true
        - name: membership_id
          schema:
            $ref: '#/components/schemas/membership/properties/id'
          in: query
          required: true
        - name: start_time
          in: query
          description: >-
            start time of calendar. if not exist, first day of month will be
            considered.
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          description: >-
            end time of calendar. if not exist, last day of month will be
            considered.
          schema:
            type: string
            format: date-time
        - name: timezone
          in: query
          schema:
            $ref: '#/components/schemas/timezone'
          required: false
      responses:
        '200':
          description: When a free time found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date-time
                      example: '2023-09-21T00:00:00.000000+03:30'
                    slots:
                      type: array
                      items:
                        type: object
                        properties:
                          time:
                            type: string
                            format: date-time
                            example: '2023-09-21T10:00:00.000000+03:30'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - Availability
  /v1/providers-specialities:
    get:
      summary: Get list of provider's specialities
      parameters:
        - name: provider_id
          schema:
            $ref: '#/components/schemas/provider/properties/id'
          in: query
      responses:
        '200':
          description: Get list of provider's specialities
          content:
            application/json:
              schema:
                properties:
                  providers_specialities:
                    nullable: false
                    type: array
                    items:
                      $ref: '#/components/schemas/provider_speciality'
      tags:
        - Providers Specialities
    post:
      summary: Store list of specialities alongside academic degree for a provider
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                alias:
                  $ref: '#/components/schemas/provider_speciality/properties/alias'
                academic_degree_id:
                  $ref: '#/components/schemas/academic_degree/properties/id'
                speciality_id:
                  $ref: '#/components/schemas/speciality/properties/id'
                achieved_at:
                  $ref: '#/components/schemas/provider_speciality/properties/achieved_at'
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Providers Specialities
  /v1/providers-specialities/{id}:
    patch:
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/provider_speciality/properties/id'
          in: path
          required: true
      summary: Update speciality alongside academic degree of a provider
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                alias:
                  $ref: '#/components/schemas/provider_speciality/properties/alias'
                academic_degree_id:
                  $ref: '#/components/schemas/academic_degree/properties/id'
                speciality_id:
                  $ref: '#/components/schemas/speciality/properties/id'
                achieved_at:
                  $ref: '#/components/schemas/provider_speciality/properties/achieved_at'
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Providers Specialities
    delete:
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/provider_speciality/properties/id'
          in: path
          required: true
      summary: delete a record of providers specialities
      description: ''
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Providers Specialities
  /v1/specialities-tags:
    get:
      summary: tags of spciality
      parameters:
        - name: speciality_id
          schema:
            $ref: '#/components/schemas/speciality/properties/id'
          in: query
      responses:
        '200':
          description: Get tags of spciality
          content:
            application/json:
              schema:
                properties:
                  specialities_tags:
                    nullable: false
                    type: array
                    items:
                      $ref: '#/components/schemas/specialities_tags'
      tags:
        - SpecialitiesTags
  /v1/users:
    post:
      summary: insert new user
      description: ''
      operationId: inserUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: '#/components/schemas/user/properties/id'
                name:
                  $ref: '#/components/schemas/authenticated_user/properties/name'
                family:
                  $ref: '#/components/schemas/authenticated_user/properties/family'
                national_code:
                  $ref: >-
                    #/components/schemas/authenticated_user/properties/national_code
                cell:
                  allOf:
                    - $ref: '#/components/schemas/authenticated_user/properties/cell'
                city_id:
                  $ref: '#/components/schemas/city/properties/id'
                province_id:
                  $ref: '#/components/schemas/province/properties/id'
                gender:
                  $ref: '#/components/schemas/authenticated_user/properties/gender'
                sso_id:
                  $ref: '#/components/schemas/user/properties/sso_id'
      responses:
        '200':
          description: Get Inserted user information
          content:
            application/json:
              schema:
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/authenticated_user'
      tags:
        - Users
    get:
      summary: get users informations
      description: ''
      operationId: getUsersInformation
      parameters:
        - name: sso_id
          schema:
            $ref: '#/components/schemas/user/properties/sso_id'
          in: query
        - name: cell
          schema:
            $ref: '#/components/schemas/authenticated_user/properties/cell'
          in: query
      responses:
        '200':
          description: Default users list response
          content:
            application/json:
              schema:
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
      tags:
        - Users
  /v1/users/{id}:
    summary: users information
    get:
      summary: get user information
      description: ''
      operationId: getUser
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/user/properties/id'
          in: path
          required: true
      responses:
        '200':
          description: Get user information
          content:
            application/json:
              schema:
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
      tags:
        - Users
    patch:
      summary: update user information
      description: ''
      operationId: updateUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/user/properties/id'
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/authenticated_user/properties/name'
                family:
                  $ref: '#/components/schemas/authenticated_user/properties/family'
                national_code:
                  $ref: >-
                    #/components/schemas/authenticated_user/properties/national_code
                cell:
                  allOf:
                    - $ref: '#/components/schemas/authenticated_user/properties/cell'
                  description: user new cell should be sent along with otp
                otp:
                  example: '4556'
                  type: string
                  description: The otp sent to the user new cell.
                image_name:
                  $ref: '#/components/schemas/user/properties/image'

                gender:
                  $ref: '#/components/schemas/authenticated_user/properties/gender'
                sso_id:
                  $ref: '#/components/schemas/authenticated_user/properties/sso_id'
      responses:
        '200':
          description: Get Authenticated user information
          content:
            application/json:
              schema:
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/authenticated_user'
      tags:
        - Users
  /v1/users/{id}/otp:
    patch:
      summary: send otp to verify user new cell
      description: ''
      operationId: userCellOtp
      security:
        - BearerAuth: []
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/user/properties/id'
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cell:
                  allOf:
                    - $ref: '#/components/schemas/authenticated_user/properties/cell'
                    - description: user new cell
      responses:
        '200':
          description: otp sent to new user cell successfuly
      tags:
        - Users
  /V1/doctor/slug:
    get:
      summary: Get doctor master slug
      description: Retrieve information for a specific doctor by their ID and server ID.
      parameters:
        - name: doctor_id
          in: query
          required: true
          description: The ID of the doctor to retrieve.
        - name: server_id
          in: query
          required: true
          description: The server ID associated with the doctor.
      responses:
        200:
          $ref: '#/components/responses/Slug'
      tags:
        - Users
  /v1/auth/me:
    summary: fetch authenticated user record
    get:
      summary: get authenticated user information
      description: ''
      operationId: getAuthenticatedUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Get Authenticated user information
          content:
            application/json:
              schema:
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/authenticated_user'
      tags:
        - Auth

  /v1/auth/me/feedbacks:
    summary: feedbacks of authenticated user
    get:
      summary: get feedbacks of authenticated user
      description: ''
      operationId: getFeedbacksOfAuthenticatedUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: feedbacks of authenticated user recived successfuly
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "درخواست شما با موفقیت پردازش شد"
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Feedback'
      tags:
        - Auth
  /v1/auth/resend-password:
    summary: send new password to user cell
    get:
      summary: send new password to user cell
      description: ''
      operationId: resendPassword
      parameters:
        - name: mobile
          schema:
            nullable: false
            description: mobile number of the user
            example: '913000000'
            type: string
          in: query
      responses:
        '200':
          description: new Password sent succecfully
      tags:
        - Auth
  /v1/auth/login:
    post:
      summary: authenticate user by username and password
      description: ''
      operationId: LoginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  allOf:
                    - nullable: false
                    - description: username of the user
                    - example: '913000000'
                    - type: string
                password:
                  allOf:
                    - nullable: false
                    - description: password of the user
                    - example: '4552'
                    - type: string
      responses:
        '200':
          description: sucess authentication response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success_authentication'
      tags:
        - Auth
  /v1/auth/refresh:
    post:
      summary: refresh expired authentication token
      operationId: RefreshToken
      security:
        - BearerAuth: []
      responses:
        '200':
          description: success refresh response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/success_authentication'
      tags:
        - Auth
  /v1/reserve:
    post:
      summary: Reserve a time slot for 5 minutes
      description: ''
      operationId: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                membership_id:
                  $ref: '#/components/schemas/membership/properties/id'
                service_id:
                  $ref: '#/components/schemas/service/properties/id'
                time:
                  type: string
                  format: date-time
              required:
                - membership_id
                - service_id
                - time
      responses:
        '200':
          description: Time slot reserved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reserve'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - Availability
  /v1/reserve/{reserve_id}:
    delete:
      summary: Remove reservation of slot
      description: ''
      operationId: ''
      parameters:
        - name: reserve_id
          in: path
          schema:
            $ref: '#/components/schemas/reserve/properties/id'
          required: true
        - name: membership_id
          in: query
          schema:
            $ref: '#/components/schemas/membership/properties/id'
          required: true
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Availability
  /v1/appointments/{id}:
    patch:
      summary: Update an appointment info
      security:
        - BearerAuth: []
      description: ''
      operationId: ''
      parameters:
        - name: id
          in: path
          schema:
            $ref: '#/components/schemas/appointment/properties/id'
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                start_time:
                  $ref: '#/components/schemas/appointment/properties/start_time'
                end_time:
                  $ref: '#/components/schemas/appointment/properties/end_time'
                payment_status:
                  $ref: '#/components/schemas/payment_status'
                paziresh_status:
                  $ref: '#/components/schemas/paziresh_status'
                visit_status:
                  $ref: '#/components/schemas/visit_status'
                membership_id:
                  allOf:
                    - $ref: '#/components/schemas/membership/properties/id'
                    - description: if the doctor is changed
                attendee:
                  type: object
                  properties:
                    name:
                      type: string
                    family:
                      type: string
                    cell:
                      type: string
                    national_code:
                      type: string
      responses:
        '200':
          description: Appointment submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appointment'
      tags:
        - Appointments
    delete:
      summary: Delete an appointment
      security:
        - BearerAuth: []
      description: ''
      operationId: ''
      parameters:
        - name: id
          in: path
          schema:
            $ref: '#/components/schemas/appointment/properties/id'
          required: true
      responses:
        '204':
          $ref: '#/components/responses/204'
      tags:
        - Appointments
  /v1/feedbacks/average-waiting-time:
    get:
      tags:
        - Feedbacks
      summary: Get the average waiting time for a specific center.
      description: >-
        Retrieve the average waiting time for a given center based on the
        provided slug.
      operationId: getAverageWaitingTime
      parameters:
        - name: slug
          in: query
          required: true
          description: The slug representing.
          schema:
            type: string
        - name: start_date
          in: query
          required: false
          description: The start date with format Y-m-d like 2023-01-01
          schema:
            type: string
        - name: end_date
          in: query
          required: false
          description: The end date with format Y-m-d like 2023-11-06
          schema:
            type: string
        - name: "limit"
          in: "query"
          required: false
          description: "The feedbacks limit parameter"
          schema:
            type: "integer"
      responses:
        '200':
          description: Successfully retrieved average waiting time.
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: درخواست شما با موفقیت پردازش شد
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/WaitingTimeInfo'
  /v1/feedbacks/waiting-time-statistics:
    get:
      tags:
        - Feedbacks
      summary: Get the statistics of waiting time for a specific center.
      description: >-
        Retrieve the statistics of waiting time for a given center based on the
        provided slug.
      operationId: getWaitingTimeStatistics
      parameters:
        - name: slug
          in: query
          required: true
          description: The slug representing.
          schema:
            type: string
        - name: start_date
          in: query
          required: false
          description: The start date with format Y-m-d like 2023-01-01
          schema:
            type: string
        - name: end_date
          in: query
          required: false
          description: The end date with format Y-m-d like 2023-11-06
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: The feedbacks limit parameter
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved statistics of waiting time.
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: درخواست شما با موفقیت پردازش شد
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/WaitingTimeStatistics'

  /v1/feedbacks/average-rates:
    get:
      tags:
        - Feedbacks
      summary: Get average rates .

      operationId: getAverageRates
      parameters:
        - name: slug
          in: query
          required: true
          description: The slug representing.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved average rates.
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: درخواست شما با موفقیت پردازش شد
                  result:
                    $ref: '#/components/schemas/AverageRates'
  /v1/feedbacks/count:
    get:
      tags:
        - Feedbacks
      summary: Get count of feedbacks.

      operationId: getCountFeedbacks
      parameters:
        - name: slug
          in: query
          required: true
          description: The slug representing.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved count feedbacks.
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: درخواست شما با موفقیت پردازش شد
                  result:
                    type: integer
                    example: 352
  /v1/feedbacks/satisfaction-percent:
    get:
      tags:
        - Feedbacks
      summary: Get satisfaction percent of doctor.

      operationId: getSatisfactionPercent
      parameters:
        - name: slug
          in: query
          required: true
          description: The slug representing.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved satisfaction percent.
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: SUCCESS
                  message:
                    type: string
                    example: درخواست شما با موفقیت پردازش شد
                  result:
                    type: integer
                    example: 82



  /v1/feedbacks:
    get:
      summary: Retrieve feedbacks
      description: Returns a list of feedbacks based on the provided ID
      parameters:
        - in: query
          name: slug
          required: false
          description: filter by provider slug
          schema:
            type: string
        - in: query
          name: user_id
          required: false
          description: filter by user id that committed feedback
          schema:
            type: integer
        - in: query
          name: recommended
          required: false
          description: filter by recommended that retrieve recommended feedback
          schema:
            type: boolean
        - in: query
          name: search
          required: false
          description: search text on reviews description
          schema:
            type: string
        - in: query
          name: page
          description: page number (for pagination)
          required: false
          schema:
            type: integer
        - in: query
          name: order_by
          description: sort feedbacks by fields
          required: false
          schema:
            type: string
            enum: ["created_at","updated_at","like","default_order"]
            example: "default_order"
        - in: query
          name: no_page_limit
          description: return feedbacks without pagination
          required: false
          schema:
            type: boolean
            example: false
        - in: query
          name: additional_fields
          description: return additional fields that does not exists in feedback resource
          required: false
          schema:
            type: string
            enum: ["doctor_full_name"]
            example: "doctor_full_name"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                 properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "درخواست شما با موفقیت پردازش شد"
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Feedback'
        '404':
          description: Not Found Operation
          content:
            application/json:
              schema:
                $ref: '#/components/responses/404'
      tags:
        - Feedbacks
    post:
      summary: Submit feedback
      description: Provide feedback for review.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Feedback/properties/description'
                external_id:
                  type: string
                  example: your external identity
      responses:
        '200':
          description: Feedback submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  action:
                    type: string
                  success:
                    type: boolean
                example:
                  action: enqueued
                  success: true
      tags:
        - Feedbacks
  /v1/feedbacks/{id}:
    patch:
      summary: Update feedback description
      description: Update description of feedback by its ID.
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the feedback to be updated.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Feedback/properties/description'
      responses:
        '200':
          description: Feedback updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  action:
                    type: string
                  success:
                    type: boolean
                example:
                  action: enqueued
                  success: true
      tags:
        - Feedbacks
    delete:
      summary: Delete feedback
      description: Remove a feedback by its ID.
      tags:
        - Feedbacks
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the feedback to be deleted.
          schema:
            type: integer
      responses:
        '200':
          description: Feedback deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                example:
                  status: SUCCESS
                  message: درخواست شما با موفقیت پردازش شد
  /v1/feedbacks/{id}/like:
    post:
      summary: feedback like
      description: like on the feedback
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the feedback to be liked.
          schema:
            type: integer
      responses:
        '200':
          description: Feedback liked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                example:
                  status: SUCCESS
                  message: درخواست شما با موفقیت پردازش شد
      tags:
        - Feedbacks
    delete:
      summary: feedback un-like
      description: remove like on the feedback
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the feedback to remove like.
          schema:
            type: integer
      responses:
        '200':
          description: Feedback like removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                example:
                  status: SUCCESS
                  message: درخواست شما با موفقیت پردازش شد
      tags:
        - Feedbacks
  /v1/search:
    get:
      summary: Search for something
      description: Search for something based on text, center, result type, and expertise.
      tags:
        - Search
      parameters:
        - name: text
          in: query
          description: The text to search for.
          required: false
          schema:
            type: string
        - name: center
          in: query
          description: The center id for the search.
          required: false
          schema:
            type: integer
        - name: result_type
          in: query
          description: The result type for the search.
          required: false
          schema:
            type: string
            enum:
              - فقط پزشکان
        - name: expertise
          in: query
          description: The expertise for the search.
          required: false
          schema:
            type: string
            enum:
              - internal-diseases
        - name: token
          in: query
          description: The token of the user for requests that need permission
          required: false
          schema:
            type: string
        - name: token
          in: cookie
          description: The token of the user for requests that need permission
          required: false
          schema:
            type: string
        - name: give_search_engine_request
          in: query
          description: for degugging search requests, curl request of search engine return in response(need admin permission)
          required: false
          schema:
            type: boolean
        - name: give_search_engine_response
          in: query
          description: for degugging search requests, response of search engine return in response.(need admin permission)
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  search:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 6
                      pagination:
                        type: object
                        properties:
                          limit:
                            type: integer
                            example: 20
                          page:
                            type: integer
                            example: 1
                      result:
                        type: array
                        items:
                          $ref: '#/components/schemas/SearchResult'
                      debug_mode_result:
                        type: object
                        properties:
                          search_engine_request:
                            type: string
                            example: "curl -X GET -H 'APIKEY: assssasdqwqwdqdqwdq' -H 'Content-Type: application/json' 'https://searchia.ir/api/index/slim_clinic?filters=&optionalFilters=&facetFilters=result_type%3A%D9%81%D9%82%D8%B7%20%D9%BE%D8%B2%D8%B4%DA%A9%D8%A7%D9%86%2Cresult_type%3A%D9%81%D9%82%D8%B7%20%DA%A9%D9%84%DB%8C%D9%86%DB%8C%DA%A9%E2%80%8C%D9%87%D8%A7%20%D9%88%20%D8%A8%DB%8C%D9%85%D8%A7%D8%B1%D8%B3%D8%AA%D8%A7%D9%86%E2%80%8C%D9%87%D8%A7&query=%D8%B2%D9%86%D8%A7%D9%86&from=0&size=20&facets=record_type%2Cresult_type%2Cgender%2Cturn_type%2Cdegree%2Cgood_behave_doctor%2Cpopular_doctor%2Cless_waiting_time_doctor%2Cconsult_price%2Chas_prescription%2Cwork_time_frames%2Chospital_affiliation%2Cgroup_expertise%2Cexpertise%2Ccenter_type&docInfo=1'"
                          search_engine_response:
                            type: string
                            example: '{
                "totalHits": 65731,
                "searchTime": 184,
                "queryId": "366937A1AB51761A",
                "results": [
                    {
                        "indexName": "slim_clinic",
                        "documentId": "doctor_98a72fbc-f32b-41e9-b6e2-c498768e09e8_1",
                        "documentInfo": {
                            "NumberOfWords": 1,
                            "Distance": 0,
                            "Position": 2,
                            "NumberOfExactMatch": 1,
                            "ExactMatch": false,
                            "DocRank": 0
                        },
                        "beforePersonalizationPosition": 0,
                        "pinned": false,
                        "contentRankingDetails": null,
                        "source": {
                            "expertises": [
                                {
                                    "degree": {
                                        "name": "کارشناس",
                                        "id": 2
                                    },
                                    "expertise": {
                                        "name": "مامایی"
                                    },
                                    "expertise_groups": [
                                        {
                                            "name": "زنان، زایمان و نازایی"
                                        },
                                        {
                                            "name": "زنان، زایمان و نازایی"
                                        }
                                    ],
                                    "alias_title": "مراقب دوران بارداری-مشاوره ودرمان عفونت های زنان-پاپ اسمیر-آموزش بهداشت فردی-آموزش نحوه صحیح شیردهی"
                                }
                            ],
                            "presence_freeturn": 1700293500,
                            "prefix": "دکتر",
                            "prescription_waiting_time_wilson_score": 1.1432334426561412,
                            "online_visit_waiting_time_wilson_score": 1.1,
                            "expertise": [
                                "مامایی"
                            ],'
  /v1/search/doc/{DOC_ID}:
    put:
      summary: Update a single search document
      description: This API is used to update a single search document in JSON format (all document data or some fields).
      operationId: updateDocument
      tags:
        - Search
      parameters:
        - name: DOC_ID
          in: path
          required: true
          description: The identifier of the document to be updated.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                API_KEY:
                  type: string
                  description: One of the API keys defined on the application.
                JSON_DOC:
                  type: string
                  description: The document to be updated in JSON format.
      responses:
        '200':
          description: The document was successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusType:
                    type: string
                    example: SUCCESS
                  details:
                    type: string
                    example: null
                  entity:
                    type: string
                    example: null
        '400':
          description: Invalid JSON format of the document or invalid document ID.
        '401':
          description: Invalid API_KEY.
        '402':
          description: Plan related errors (expiry date reached, record limit reached, etc.).
        '403':
          description: API Key related errors (rate limit exceeded, not permitted access, etc.).
        '404':
          description: Index or document not found.
        '409':
          description: Conflict in mapping one or more fields of the document for indexing.
        '500':
          description: Internal server error.
  /holidays:
    get:
      summary: Retrieve official holidays
      description: Fetch a list of official holidays within a given date range.
      operationId: getHolidays
      tags:
        - Holidays
      parameters:
        - in: query
          name: start_date
          required: true
          description: The start date of the date range in YYYY-MM-DD format.
          schema:
            type: string
            format: date
        - in: query
          name: end_date
          required: true
          description: The end date of the date range in YYYY-MM-DD format.
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A list of official holidays within the given date range.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date
                      description: The date of the official holiday.
                    events:
                      type: array
                      items:
                        type: object
                        properties:
                          description:
                            type: string
                            description: A description of the holiday event.
                          additional_description:
                            type: string
                            description: Additional information about the holiday event.
                          is_religious:
                            type: boolean
                            description: Indicates whether the holiday event is religious.
                          is_holiday:
                            type: boolean
                            description: >-
                              Indicates whether the day is considered an
                              official holiday.
        '400':
          description: Bad request. Invalid input provided.
        '500':
          description: Internal server error. Failed to fetch data from external API.
  /files/{name}:
    get:
      summary: get file content by file name
      description: get file content by name and download it
      tags:
        - Files
      parameters:
        - in: path
          name: name
          required: true
          description: file name with format (jpg,png,pdf,docx)
          schema:
            type: string
      responses:
        '200':
          description: recived file content successfully
          content:
            application/jpeg:
              schema:
                type: string
                format: binary
            application/pdf:
              schema:
                type: string
                format: binary
            application/png:
              schema:
                type: string
                format: binary
            application/docx:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
                description: return content file in response
                example: inline; filename="name.jpg"
  /files:
    post:
        summary: upload file
        tags:
          - Files
        requestBody:
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
        responses:
          '200':
            description: file uploaded successfuly
tags:
  - name: Providers
  - name: Users
  - name: Auth
  - name: Memberships
  - name: Services
  - name: Availability
  - name: Appointments
  - name: Providers Specialities
  - name: SpecialitiesTags
  - name: Files
components:
  schemas:
    user:
      description: user information
      properties:
        id:
          nullable: false
          description: uniqe identifier of any user
          example: 123
          type: integer
        name:
          nullable: true
          description: Name of the user
          example: Mohammad
          type: string
        family:
          nullable: true
          description: Family of the user
          example: Mohammadian
          type: string
        gender:
          nullable: true
          description: Gender of the user
          example: male
          type: string
          enum:
            - male
            - female
        image:
          nullable: true
          description: image of the user
          example: example.jpg
          type: string
        sso_id:
          nullable: false
          description: uniqe id of OAuth2 SSO system
          example: d90af07e-7d71-11ee-86c8-005056ad7d06
          type: string
    success_authentication:
      properties:
        access_token:
          description: token of the authenticated user
          example: >-
            eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL2RvY3RvcnMtYXBpLnBhemlyZXNoMjQuY29tL1YxL2F1dGgvbG9naW4iLCJpYXQiOjE2OTY0MDA0MTIsImV4cCI6MTY5NzYxMDAxMiwibmJmIjoxNjk2NDAwNDEyLCJqdGkiOiJTUE1tVlhJNVNxQ2NCV1haIiwic3ViIjoiMTI0OTg5NzUiLCJuYW1lIjoi2KrYs9iqIiwiZmFtaWx5Ijoi2KrYs9iqIiwiZ2VuZGVyIjoibWFsZSIsInJvbGUiOiJ1c2VyIn0.zGHVD4MgJePIssjfGQWhG1AwBRefSVPUHecXF8WYpq0
          type: string
        token_type:
          description: type of the token
          example: bearer
          type: string
        expires_in:
          description: token expire duration
          example: 1209600
          type: integer
    authenticated_user:
      description: authenticated user information
      properties:
        id:
          $ref: '#/components/schemas/user/properties/id'
        name:
          $ref: '#/components/schemas/user/properties/name'
        family:
          $ref: '#/components/schemas/user/properties/family'
        gender:
          $ref: '#/components/schemas/user/properties/gender'
        cell:
          nullable: true
          description: cell of the user
          example: '913000000'
          type: string
        national_code:
          nullable: true
          description: national_code of the user
          example: '124666554'
          type: string
        sso_id:
          $ref: '#/components/schemas/user/properties/sso_id'
    city:
      description: city properties
      properties:
        name:
          nullable: true
          description: name of the city
          example: یزد
          type: string
        en_slug:
          nullable: true
          description: english slug of the city
          example: yazd
          type: string
        id:
          nullable: true
          description: id of the city
          example: 426
          type: integer
        province_id:
          nullable: true
          description: province id  of the city
          example: 31
          type: integer
        is_capital:
          nullable: true
          description: check city is capital or not
          example: true
          type: boolean
    province:
      description: province properties
      properties:
        name:
          nullable: true
          description: name of the province
          example: یزد
          type: string
        en_slug:
          nullable: true
          description: english slug of the province
          example: yazd
          type: string
        id:
          nullable: true
          description: id of the province
          example: 31
          type: integer
    sub_user:
      description: user subset information
      properties:
        id:
          nullable: false
          description: uniqe identifier of any subset
          example: 123
          type: integer
        user_id:
          $ref: '#/components/schemas/user/properties/id'
    provider_notification:
      description: provider information that need authentication
      properties:
        notify_cell:
          nullable: true
          title: notification cell of the provider
          type: string
          example: 9140002500
    provider:
      description: provider information
      properties:
        id:
          nullable: false
          title: provider id
          type: integer
          example: 1234
        biography:
          nullable: true
          title: provider biography
          type: string
          example: This is a example test biography
        user_id:
          $ref: '#/components/schemas/user/properties/id'
        employee_id:
          description: >-
            uniqe identifer of any provider related to his/her job (ex: for
            doctors is medical code)
          type: string
          example: 1234567890
        job_title:
          description: job title of provider
          enum:
            - doctor
          type: string
          example: doctor
        prefix:
          description: >-
            prefix of provider according to his/her job  (ex: for doctors is
            دکتر)
          type: string
          example: دکتر
        slug:
          description: >-
            Provider slug profile (ex: دکتر-محمدی is accessible from this url
            https://paziresh24.com/dr/دکتر-محمدی)
          type: string
          example: دکتر
        page_view:
          nullable: false
          title: page view
          type: integer
          example: 15
        created_at:
          nullable: false
          title: provider registeration date and time
          type: string
          format: date-time
          example: '2016-03-08T09:04:22+00:00'
        field_start_date:
          nullable: true
          title: >-
            provider field start date ,for example: for a doctor it can be
            graduation date
          type: string
          format: date
          example: '2016-03-08'
    provider_speciality:
      description: Specialities of a provider
      properties:
        id:
          nullable: false
          title: provider speciality id
          type: integer
          example: 1234
        alias:
          title: alias
          nullable: true
          description: this refers to an alias title which was chosen by the provider
          type: string
          example: فوق تخصص حلق و گوش
        achieved_at:
          title: achieved at
          nullable: true
          description: This refers to achivment gregorian date of academic degree for this speciality
          type: string
          format: date
          example: 2010-12-13
        speciality:
          $ref: '#/components/schemas/speciality'
        academic_degree:
          $ref: '#/components/schemas/academic_degree'
    specialities_tags:
      description: tags of speciality
      properties:
        tag:
          $ref: '#/components/schemas/tag'
    tag:
      properties:
        id:
          nullable: false
          title: tag id
          type: integer
          example: 4
        title:
          nullable: true
          title: Title of tag
          type: string
          example: خون، سرطان و انکولوژی'
    speciality:
      description: >-
        Specialities which are supported and providers can choose from them, for
        example:  بهداشت روان، بیوشیمی بالینی
      properties:
        id:
          nullable: false
          title: speciality id
          type: integer
          example: 1234
        title:
          nullable: true
          title: Title of speciality
          type: string
          example: بهداشت روان
    academic_degree:
      description: >-
        Academic degree which are supported and providers can choose from them,
        for example: کارشناس، متخصص
      properties:
        id:
          nullable: false
          title: Academic degree id
          type: integer
          example: 1234
        title:
          nullable: true
          title: Title of an academic degree
          type: string
          example: کارشناسی ارشد
    membership:
      description: Relational record between users and centers
      properties:
        id:
          description: Member identifier
          example: 1
          type: integer
        provider_id:
          $ref: '#/components/schemas/provider/properties/id'
        center_id:
          description: Identifier of center (facilities that providers work on)
          example: 9876
          type: string
        booking_link:
          description: Base url of booking APIs for provider in the center
          type: string
          example: https://panel.paziresh24.com/api/v2/user-centers/1234
    service:
      description: The information of service
      properties:
        id:
          description: Service identifier
          example: 1
          type: string
        title:
          description: Service title
          example: ویزیت
          type: string
        duration:
          description: service duration
          example: '00:15:00'
          type: string
        description:
          description: service description
          type: string
        price:
          description: service price
          type: integer
          example: 100000
    appointment:
      description: Booked appointment information
      properties:
        id:
          type: string
          format: uuid
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        need_payment:
          type: boolean
    reserve:
      description: Reserved slot information
      properties:
        id:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
    timezone:
      type: string
      enum:
        - Asia/Tehran
        - America/Chicago
        - ...
    payment_status:
      type: string
      enum:
        - not_paid
        - in_progress
        - paid
        - refunded
        - refund_queue
        - refund_error
        - refund_request
        - refund_reject
    paziresh_status:
      type: string
      enum:
        - not_accepted
        - accepted
    visit_status:
      type: string
      enum:
        - not_visited
        - visited
    WaitingTimeInfo:
      type: object
      properties:
        center_id:
          type: string
          example: '5532'
        waiting_time:
          type: integer
          example: 0.5429
        waiting_time_count:
          type: integer
          example: 35
        waiting_time_title:
          type: string
          example: کمتر از یک ساعت
    WaitingTimeStatistics:
      type: object
      properties:
        center_id:
          type: string
          example: '5532'
        statistics:
          type: array
          items:
            $ref: '#/components/schemas/WaitingTimeStatistic'
    WaitingTimeStatistic:
      description: statistic of waiting time
      properties:
        waiting_time:
          nullable: false
          title: waiting time
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
          example: 1
        waiting_time_title:
          nullable: false
          title: title of waiting time
          type: string
          example: کمتر از یک ساعت
        waiting_time_count:
          nullable: false
          title: amount of waiting time
          type: integer
          example: 9
        waiting_time_percent:
          nullable: false
          title: percent of waiting time on the all waiting times
          type: number
          example: 25.71
    AverageRates:
      type: object
      properties:
        average_quality_of_treatment:
          type: integer
          example: 4.5
        average_doctor_encounter:
          type: integer
          example: 4.6
        average_explanation_of_issue:
          type: integer
          example: 4.5
    Feedback:
      type: object
      properties:
        id:
          type: integer
          example: 75
        user_name:
          type: string
          example: user's name
        user_id:
          type: integer
          example: 455578
        reply_count:
          type: integer
          example: 25
        doctor_encounter:
          type: integer
          example: 3
        quality_of_treatment:
          type: integer
          example: 4
        explanation_of_issue:
          type: integer
          example: 2
        waiting_time:
          type: integer
          example: 3
        description:
          type: string
          example:  feedback description .
        book_date:
          type: string
          format: date
          example: '2024-01-01 00:00:00'
        created_at:
          type: string
          format: unix_timestamp
          example: '1690752646'
        updated_at:
          type: string
          format: unix_timestamp
          example: '1690752646'
        reply:
          type: array
          items:
            $ref: '#/components/schemas/Reply'
    Reply:
      type: object
      properties:
        id:
          type: integer
          example: 75
        user_name:
          type: string
          example: user's name
        user_id:
          type: integer
          example: 455578
        description:
          type: string
          example:  feedback description .
        created_at:
          type: string
          format: unix_timestamp
          example: '1690752646'
        updated_at:
          type: string
          format: unix_timestamp
          example: '1690752646'
        reply:
          type: array
          items:
              {}
    SearchResult:
      type: object
      properties:
        id:
          type: string
          example: '540'
        type:
          type: string
          example: doctor
        title:
          type: string
          example: دکتر پروفسور محمد تقی نوربالا
        image:
          type: string
          example: /api/getImage/p24/search-men/file.jpg
        view:
          type: string
          example: 1219K
        satisfaction:
          type: integer
          example: 87
        rates_count:
          type: integer
          example: 8716
        display_expertise:
          type: string
          description: return this field If type=`doctor`
          example: متخصص بیماریهای پوست و مو
        url:
          type: string
          example: /dr/دکتر-پروفسور-نور-بالا/
  responses:
    '201':
      description: Record inserted successfully
    '204':
      description: No Content (request was successfully executed)
    '404':
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: FAILED
              message:
                type: string
    '409':
      description: There is a conflict
      content:
        application/json:
          schema:
            properties:
              status:
                type: string
                example: FAILED
              message:
                type: string
    Slug:
      description: Successful response with the doctor's slug.
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "SUCCESS"
              message:
                type: string
                example: "درخواست شما با موفقیت پردازش شد"
              data:
                type: object
                properties:
                  slug:
                    type: string
                    example: "دکتر-مریم-برومند-3"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
